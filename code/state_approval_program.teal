// CODE NOT WORKING YET - WORK IN PROGRESS - IN GIT ONLY FOR SAFETY

// scratch
// 10 - loop ix
// 12 - ASA id i
// 13 - ASA w
// 14 - sum w
// 15 - n
// 16 - ni
// 17 - ASA id o
// 18 - ASA id n0
// 0 - balance i
// 1 - balance o
// 2 - weight i
// 3 - weight o
// 4 - amount i
// 5 - amount o

#pragma version 6

txn OnCompletion
int NoOp
==
bnz handle_noop

txn OnCompletion
int OptIn
==
bnz handle_optin

txn OnCompletion
int CloseOut
==
bnz handle_closeout

txn OnCompletion
int UpdateApplication
==
bnz handle_updateapp

txn OnCompletion
int DeleteApplication
==
bnz handle_deleteapp

// Unexpected OnCompletion value. Should be unreachable.
b decline
////////////////


////////////////
handle_noop:

txna ApplicationArgs 0
byte "update"
==
bnz handle_update

txna ApplicationArgs 0
byte "swap"
==
bnz handle_swap

txna ApplicationArgs 0
byte "withdraw"
==
bnz handle_withdraw

txna ApplicationArgs 0
byte "optin"
==
bnz handle_optin_asa

// Unexpected first arg
b decline
////////////////



////////////////
// stack, ASA id
get_balance:

global CurrentApplicationAddress
swap
dup // ASA id

// stack, CurrentApplicationAddress, ASA id, ASA id

int 0
itob
==
bnz get_balance_algo
b get_balance_asa

get_balance_algo:
pop
balance
retsub

get_balance_asa:
btoi
asset_holding_get AssetBalance
pop
retsub
////////////////



////////////////
// stack
get_amount_i:

load 12

int 0
itob
==
bnz get_amount_i_algo
b get_amount_i_asa

get_amount_i_algo:
gtxn 0 Amount
retsub

get_amount_i_asa:
gtxn 0 AssetAmount
retsub
////////////////



///////////////
// swap
// args: swap coin_o
// group of 2: 1st send A_i amount of coin i / 2nd app call here to trigger txn to send A_o of coin o to sender
// 
handle_swap:

// 2 txns in group
global GroupSize
int 2
==
assert

// this txn is 2nd txn in group
txn GroupIndex
int 1
==
assert

// ASA id i
gtxn 0 XferAsset
itob
store 12

// ASA id o
txna Assets 0
itob
store 17

// assert i xor o is n0
int 0
callsub get_ni
app_global_get
store 18
load 18
load 12
==
load 18
load 17
==
^
assert

// balance i
load 12
callsub get_balance
store 0

// balance o
load 17
callsub get_balance
store 1

// weight i
load 12
app_global_get
store 2

// weight o
load 17
app_global_get
store 3

// amount i
callsub get_amount_i
store 4

// amount o
int 1
load 0
load 4
+
load 0
/
load 2
load 3
/
exp
-
load 1
*
store 5

// send
load 17
int 0
itob
==
bnz send_algo
b send_asa
///////////////


///////////////
send_algo:
itxn_begin
int pay
itxn_field TypeEnum
txn Sender
itxn_field Receiver
load 5
itxn_field Amount
itxn_submit
b approve
///////////////

///////////////
send_asa:
itxn_begin
int axfer
itxn_field TypeEnum
txn Sender
itxn_field AssetReceiver
load 5
itxn_field AssetAmount
load 17
itxn_field XferAsset
itxn_submit
b approve
///////////////


////////////////
// withdraw coins from SC to creator
// only creator
handle_withdraw:
b decline
////////////////


////////////////
get_n:
int 0
byte "n"
app_global_get_ex
pop
retsub
////////////////

////////////////
delete_global_state:

// loop ix
int 0
store 10

// n
callsub get_n
store 15

// n == 0 && retsub
load 15
bz delete_global_state_loop_end

// del n
byte "n"
app_global_del

delete_global_state_loop:

// ni
load 10
callsub get_ni
store 16

// ASA id
load 16
app_global_get
store 12

// del global[ni]
load 16
app_global_del

// del global[ASA id]
load 12
app_global_del

// loop
load 10
int 1
+
load 15
<
bz delete_global_state_loop_end
load 10
int 1
+
store 10
b delete_global_state_loop

delete_global_state_loop_end:
retsub
////////////////


////////////////
// stack, i
get_ni:
byte "n"
swap
itob
extract 7 1 // TODO if accept more than 9 assets
concat
retsub
////////////////

////////////////
// stack, ASA id
assert_sc_opted_into_asa:

dup
bz assert_sc_opted_into_asa_end

global CurrentApplicationAddress
swap
asset_holding_get AssetBalance
int 1
==
assert

assert_sc_opted_into_asa_end:
pop
retsub
////////////////

///////////////
// update
// only creator can update
// args: update ASA_1 w_1 ASA_2 w_2 ...
// delete all existing state
// global[ASA_i] = w_i
// global[n] = NumAppArgs
// assert sum w_i == 1
// if global[ASA_i] does not exist yet, set global[ASA_i] = w_i if global state space available
handle_update:

// only creator 
global CreatorAddress
txn Sender
==
assert

// only 1 txn in group
global GroupSize
int 1
==
assert

// for now max 9 assets
txn NumAssets
int 10
<
assert

// delete old state
callsub delete_global_state

// set n
byte "n"
txn NumAssets
app_global_put

// loop through all args to update global state

// sum w_i
int 0
store 14

// loop ix
int 0
store 10

handle_update_loop:

// ASA id
load 10
txnas Assets
store 12

// assert SC is opted into ASA
load 12
callsub assert_sc_opted_into_asa

// w
load 10
int 1
+
txnas ApplicationArgs
btoi
store 13

// sum w
load 13
load 14
+
store 14

// set global[ASA id] = w
load 12
itob
load 13
app_global_put

// set global[ni] = ASA id
load 10
callsub get_ni
load 12
itob
app_global_put

// loop
load 10
int 1
+
store 10
load 10
txn NumAssets
<
bz handle_update_loop_end
b handle_update_loop

handle_update_loop_end:

// check sum w
load 14
int 10000
==
assert

// done
b approve
///////////////







///////////////
// optin SC to ASA
handle_optin_asa:

global CreatorAddress
txn Sender
==
assert

global GroupSize
int 1
==
assert

itxn_begin
int axfer
itxn_field TypeEnum
global CurrentApplicationAddress
itxn_field AssetReceiver
int 0
itxn_field AssetAmount
txna Assets 0
itxn_field XferAsset
itxn_submit

b approve
///////////////



///////////////
// Update only by creator - for now
// TODO maybe make updating impossible for safety and assurance
handle_updateapp:
handle_deleteapp:
global GroupSize
int 1
==
assert

global CreatorAddress
txn Sender
==
assert

b approve
///////////////

///////////////
// handle closeOut, cannot delete app, no decline
handle_closeout:
b decline
///////////////

///////////////
handle_optin:
b approve
///////////////

////////////////
// end branches
decline:
int 0
return

approve:
int 1
return
////////////////
